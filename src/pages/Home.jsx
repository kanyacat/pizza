import { useEffect, useRef } from 'react'
import { Categories } from '../components/Categories'
import { Sort, sortList } from '../components/Sort'
import { Skeleton } from '../components/PizzaBlock/Skeleton'
import { PizzaBlock } from '../components/PizzaBlock/PizzaBlock'
import { Pagination } from '../components/Pagination/Pagination'
import { useDispatch, useSelector } from 'react-redux'
import {
	filterSelector,
	setCategoryId,
	setCurrentPage,
	setParams
} from '../redux/slices/filterSlice'
import qs from 'qs'
import { useNavigate } from 'react-router-dom'
import { fetchPizzas, pizzasSelector } from '../redux/slices/pizzasSlice'

export function Home() {
	const navigate = useNavigate()

	const { categoryId, sort, currentPage, searchValue } =
		useSelector(filterSelector)
	const { items, status } = useSelector(pizzasSelector)
	const dispatch = useDispatch()

	const isSearch = useRef(false)
	const isMounted = useRef(false)

	const getPizzas = async () => {
		const category = categoryId > 0 ? `category=${categoryId}` : ''
		const order = sort.sortProperty.includes('-') ? 'asc' : 'desc'
		const sortBy = sort.sortProperty.replace('-', '')
		const search = searchValue ? `&search=${searchValue}` : ''

		dispatch(
			fetchPizzas({
				sortBy,
				category,
				order,
				search,
				currentPage
			})
		)
	}

	const onChangeCategory = id => {
		dispatch(setCategoryId(id))
	}

	const onChangePage = number => {
		dispatch(setCurrentPage(number))
	}

	//–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä –∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	useEffect(() => {
		if (isMounted.current) {
			const queryString = qs.stringify({
				sortProperty: sort.sortProperty,
				categoryId,
				currentPage
			})

			navigate(`?${queryString}`)
		}
		isMounted.current = true //–ø—Ä–æ–∏–∑–æ—à–µ–ª —Ä–µ–Ω–¥–µ—Ä
	}, [categoryId, sort.sortProperty, searchValue, currentPage])

	//–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä —É–∂–µ –±—ã–ª, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	useEffect(() => {
		if (window.location.search) {
			//substring —á—Ç–æ–± —É–±—Ä–∞—Ç—å ?
			const params = qs.parse(window.location.search.substring(1))

			const sort = sortList.find(
				obj => obj.sortProperty === params.sortProperty
			)

			dispatch(setParams({ ...params, sort }))
			isSearch.current = true //–ø—Ä–∏—à–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
		}
	}, [])

	//–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–∏–º –ø–∏—Ü—Ü—ã
	useEffect(() => {
		window.scrollTo(0, 0)

		//–∂–¥–µ–º –ø–æ–∫–∞ –ø—Ä–∏–¥—É—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL, —á—Ç–æ–± –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ü—Ü—ã
		if (!isSearch.current) {
			getPizzas()
		}

		isSearch.current = false
	}, [categoryId, sort.sortProperty, searchValue, currentPage])

	const pizzas = items.map(pizza => <PizzaBlock key={pizza.id} {...pizza} />)
	const skeletons = [...new Array(6)].map((_, index) => (
		<Skeleton key={index} />
	))

	return (
		<>
			<div className='container'>
				<div className='content__top'>
					<Categories
						value={categoryId}
						onChangeCategory={id => onChangeCategory(id)}
					/>
					<Sort />
				</div>
				<h2 className='content__title'>–í—Å–µ –ø–∏—Ü—Ü—ã</h2>

				{status === 'error' ? (
					<div className='content__error-info'>
						<h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
						<p>
							–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ü—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
							–ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.
						</p>
					</div>
				) : (
					<div className='content__items'>
						{status === 'loading' ? skeletons : pizzas}
					</div>
				)}

				<Pagination
					currentPage={currentPage}
					onChangePage={number => onChangePage(number)}
				/>
			</div>
		</>
	)
}
